
public class Zaehler {
	private static int einer = 0;
	private static int zehner = 0;

	public Zaehler(int x, int y) {
		Zaehler.einer = x;
		Zaehler.zehner = y;
	}

	public void erhoeheUmEins(Zaehler a) throws EinerUeberlauf {

		/*
		 * Soll die „Einer“ um Eins erhöhen, den aktuellen Wert der „Einer“ ausgeben
		 * und bei einem Überlauf der „Einer“ die Exception EinerUeberlauf werfen
		 */
		if (Zaehler.einer <= 9) {
			throw new EinerUeberlauf();
		} else {
			Zaehler.einer = einer++;
		}

	}

	/*
	 * soll die „Zehner“ um Eins erhöhen, den aktuellen Wert der „Zehner“
	 * ausgeben und bei einem Überlauf der „Zehner“ also Zaehler= 100 die
	 * Exception Ueberlauf werfen.
	 */
	public void erhoeheUmZehn(Zaehler a) throws Ueberlauf {
		if (Zaehler.zehner <= 9) {
			throw new Ueberlauf("Ueberlauf!");
		} else {
			Zaehler.zehner = zehner++;
			System.out.println(a);
		}
	}

	/*
	 * Soll um Eins hochzählen, indem die Methode erhoeheUmEins aufgerufen wird.
	 * Wird ein Überlauf der „Einer“ durch das Auftreten einer entsprechenden
	 * Exception signalisiert, dann sollen die „Einer“ zurück auf Null gesetzt
	 * und dafür die „Zehner“durch Aufruf von erhoeheUmZehn erhöht werden.
	 * Danach soll dieser Überlauffehler beseitigt sein.
	 */
	public static void zaehlen(Zaehler a) throws Ueberlauf, EinerUeberlauf {
		try {
			a.erhoeheUmEins(a);
		} catch (EinerUeberlauf e) { 
			System.err.println("Ein Einerüberlauf fand stat! ");
			Zaehler.einer = 0;
			a.erhoeheUmZehn(a);
		}
	}

	@Override
	public String toString() {
		String erg = "[Zehner|Einer:]" + " " + zehner + einer;
		return erg;
	}

}
