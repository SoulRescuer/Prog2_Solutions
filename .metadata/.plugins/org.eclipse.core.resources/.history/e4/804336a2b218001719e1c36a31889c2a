package my.Package.Marius;

public class Lkw extends Fahrzeug {
	private final static double maxSpeed = 105.0;
	private final static double acceleration = 0.5;
	private final double maxLadung;
	private double ladung;

	// Konstruktor LKW
	public Lkw(String name, double geschwindigkeit, double position, double ladung, double maxLadung) {
		super(name);
		this.ladung = ladung;
		this.maxLadung = maxLadung;
	}

	@Override
	public double beschleunigen(double sekunden) {
		double tempCurrentSpeed = Lkw.acceleration * sekunden;
		double timeToReachMaxSpeed;
		double tempPosition;
		setGeschwindigkeit(tempCurrentSpeed);
		if (tempCurrentSpeed >= hoechstGeschwindigkeit()) {
			setGeschwindigkeit(hoechstGeschwindigkeit());
			tempCurrentSpeed = hoechstGeschwindigkeit();
			timeToReachMaxSpeed = tempCurrentSpeed / Lkw.acceleration;
			tempPosition = 0.5 * Lkw.acceleration * sekunden * sekunden;
			setPosition(tempPosition / 1000.0);
			super.fahren((sekunden - timeToReachMaxSpeed) * 60.0);
		} else {
			tempPosition = super.getPosition();
			tempPosition += ((0.5 * Lkw.acceleration * sekunden * sekunden) / 1000.0);
			setPosition(tempPosition);
		}
		return super.getPosition();
	}

	public void beladen(double ladungInTonnen) {
		if (istVollBeladen() == false) {
			this.ladung += ladungInTonnen;
		} else {
			System.err.println("Maximal Ladung schon erreicht!!");
		}
	}

	public void entladen(double ladungInTonnen) {
		if (ladung != 0) {
			this.ladung -= ladungInTonnen;
		} else if (ladungInTonnen >= ladung) {
			this.ladung = 0.0;
			System.out.println("Lkw wurde komplett entladen!");
		}
	}

	public boolean istVollBeladen() {
		if (ladung == maxLadung) {
			return true;
		} else {
			return false;
		}
	}

	@Override
	public double stoppen() {
		double tempCurrentSpeed4 = getGeschwindigkeit();
		double tempAnhalteweg = getAnhalteweg();
		double tempBremsverzögerung;
		if (istVollBeladen() == true) {
			tempBremsverzögerung = 3.0;
			tempAnhalteweg = (0.5 * (tempCurrentSpeed4 * tempCurrentSpeed4 / tempBremsverzögerung)
					+ (tempCurrentSpeed4 / 10) * 3);
			setGeschwindigkeit(0.0);
			setAnhalteweg(tempAnhalteweg);
			return tempAnhalteweg;
		} else {
			tempBremsverzögerung = 5.0;
			tempAnhalteweg = (0.5 * (tempCurrentSpeed4 * tempCurrentSpeed4 / tempBremsverzögerung)
					+ (tempCurrentSpeed4 / 10) * 3);
			setGeschwindigkeit(0.0);
			setAnhalteweg(tempAnhalteweg);
			return tempAnhalteweg;
		}

	}

	@Override
	public double hoechstGeschwindigkeit() {
		return Lkw.maxSpeed;
	}

	@Override
	public double fahren(double minuten) {
		return super.fahren(minuten);
	}

	public static double getAcceleration() {
		return Lkw.acceleration;
	}

	@Override
	public String toString() {
		StringBuffer c = new StringBuffer();
		c.append("Ladung: ");
		c.append(ladung);
		c.append("\t");
		c.append("MaxLadung: ");
		c.append(maxLadung);
		c.append("\t");
		return super.toString() + c.toString();
	}

}
